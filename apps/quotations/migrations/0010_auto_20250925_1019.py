# Generated by Django 4.2.7 on 2025-09-25 09:19

from django.db import migrations, connection


def fix_quotations_tables(apps, schema_editor):
    """
    Fix quotations tables by removing company_id columns and adding missing fields
    """
    with connection.cursor() as cursor:
        # Remove company_id columns if they exist
        try:
            cursor.execute("ALTER TABLE quotations_quotationtemplate DROP COLUMN IF EXISTS company_id")
            cursor.execute("ALTER TABLE quotations_quotation DROP COLUMN IF EXISTS company_id")
        except Exception:
            pass
        
        # Add missing fields to quotations_quotationtemplate if they don't exist
        template_fields = [
            ("user_id", "INTEGER REFERENCES accounts_user(id) ON DELETE CASCADE"),
            ("description", "TEXT DEFAULT ''"),
            ("primary_color", "VARCHAR(7) DEFAULT '#1976d2'"),
            ("secondary_color", "VARCHAR(7) DEFAULT '#f8f9fa'"),
            ("text_color", "VARCHAR(7) DEFAULT '#333333'"),
            ("accent_color", "VARCHAR(7) DEFAULT '#e9ecef'"),
            ("show_company_logo", "BOOLEAN DEFAULT TRUE"),
            ("show_company_details", "BOOLEAN DEFAULT TRUE"),
            ("show_bank_details", "BOOLEAN DEFAULT TRUE"),
            ("show_signature", "BOOLEAN DEFAULT TRUE"),
            ("document_title", "VARCHAR(100) DEFAULT 'QUOTATION'"),
            ("number_prefix", "VARCHAR(10) DEFAULT 'QT'"),
            ("default_terms", "TEXT DEFAULT 'This quotation is valid for 30 days from the date of issue'"),
            ("footer_text", "TEXT DEFAULT ''"),
            ("is_default", "BOOLEAN DEFAULT FALSE"),
        ]
        
        for field_name, field_definition in template_fields:
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='quotations_quotationtemplate' 
                AND column_name=%s
            """, [field_name])
            
            if not cursor.fetchone():
                cursor.execute(f"""
                    ALTER TABLE quotations_quotationtemplate 
                    ADD COLUMN {field_name} {field_definition}
                """)
        
        # Add missing fields to quotations_quotation if they don't exist
        quotation_fields = [
            ("user_id", "INTEGER REFERENCES accounts_user(id) ON DELETE CASCADE"),
            ("valid_until", "DATE"),
        ]
        
        for field_name, field_definition in quotation_fields:
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='quotations_quotation' 
                AND column_name=%s
            """, [field_name])
            
            if not cursor.fetchone():
                cursor.execute(f"""
                    ALTER TABLE quotations_quotation 
                    ADD COLUMN {field_name} {field_definition}
                """)


def reverse_fix_quotations_tables(apps, schema_editor):
    """
    Reverse the changes
    """
    with connection.cursor() as cursor:
        try:
            # Remove the fields we added
            template_fields = [
                "user_id", "description", "primary_color", "secondary_color", "text_color", "accent_color",
                "show_company_logo", "show_company_details", "show_bank_details", "show_signature",
                "document_title", "number_prefix", "default_terms", "footer_text", "is_default"
            ]
            
            for field in template_fields:
                cursor.execute(f"ALTER TABLE quotations_quotationtemplate DROP COLUMN IF EXISTS {field}")
            
            quotation_fields = ["user_id", "valid_until"]
            for field in quotation_fields:
                cursor.execute(f"ALTER TABLE quotations_quotation DROP COLUMN IF EXISTS {field}")
                
        except Exception:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ("quotations", "0009_quotation_conversion_date_and_more"),
    ]

    operations = [
        migrations.RunPython(
            fix_quotations_tables,
            reverse_fix_quotations_tables,
        ),
    ]
